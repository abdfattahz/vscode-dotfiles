[
  // =================================================
  // üü¶ BASIC INDENTING / TAB FIXES FOR VIM EXTENSION
  // =================================================

  // Name: Insert Tab (when Tab doesn't move focus)
  {
    "key": "tab",
    "command": "tab",
    "when": "editorTextFocus && !editorTabMovesFocus"
  },

  // Name: Outdent (Shift+Tab)
  {
    "key": "shift+tab",
    "command": "outdent",
    "when": "editorTextFocus && !editorTabMovesFocus"
  },

  // ==========================
  // üß≠ NAVIGATION (Vim-aware)
  // ==========================

  // Name: Focus left editor group (Normal mode; multiple groups)
  {
    "key": "ctrl+h",
    "command": "workbench.action.focusLeftGroup",
    "when": "vim.mode == 'Normal' && editorTextFocus && multipleEditorGroups"
  },

  // Name: Previous editor (Normal mode; single group)
  {
    "key": "ctrl+h",
    "command": "workbench.action.previousEditor",
    "when": "vim.mode == 'Normal' && editorTextFocus && !multipleEditorGroups"
  },

  // Name: Focus right editor group (Normal mode; multiple groups)
  {
    "key": "ctrl+l",
    "command": "workbench.action.focusRightGroup",
    "when": "vim.mode == 'Normal' && editorTextFocus && multipleEditorGroups"
  },

  // Name: Next editor (Normal mode; single group)
  {
    "key": "ctrl+l",
    "command": "workbench.action.nextEditor",
    "when": "vim.mode == 'Normal' && editorTextFocus && !multipleEditorGroups"
  },

  // Name: Navigate up among UI panes
  {
    "key": "ctrl-k",
    "command": "workbench.action.navigateUp"
  },

  // Name: Navigate down among UI panes
  {
    "key": "ctrl-j",
    "command": "workbench.action.navigateDown"
  },

  // Name: Show All Editors (like buffers list)
  {
    "key": "space ,",
    "command": "workbench.action.showAllEditors",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Name: Toggle sidebar & focus Explorer (from editor)
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
  },

  // Name: Toggle sidebar & return focus to editor (from sidebar)
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "when": "sideBarFocus && !inputFocus"
  },

  // Name: Hide sidebar if Explorer already visible
  {
    "key": "space e",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "vim.mode == 'Normal' && editorTextFocus && foldersViewVisible"
  },

  // Name: Split editor (vertical/right)
  {
    "key": "space s h",
    "command": "workbench.action.splitEditor",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Name: Split editor down (horizontal/below)
  {
    "key": "space s v",
    "command": "workbench.action.splitEditorDown",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // ====================================
  // ‚úçÔ∏è CODING HELPERS FOR VIM EXTENSION
  // ====================================

  // Name: Code Actions / Quick Fix
  {
    "key": "space c a",
    "command": "editor.action.codeAction",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Move selected line(s) up (Visual Line mode)
  {
    "key": "shift-k",
    "command": "editor.action.moveLinesUpAction",
    "when": "vim.mode == 'VisualLine' && editorTextFocus"
  },

  // Name: Move selected line(s) down (Visual Line mode)
  {
    "key": "shift-j",
    "command": "editor.action.moveLinesDownAction",
    "when": "vim.mode == 'VisualLine' && editorTextFocus"
  },

  // Name: Show Hover (docs/types)  üîÅ overrides default vscode Delete Line keybind
  {
    "key": "ctrl+shift+k",
    "command": "editor.action.showHover",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Rename symbol
  {
    "key": "space c r",
    "command": "editor.action.rename",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Go to symbol in file
  {
    "key": "space c s",
    "command": "workbench.action.gotoSymbol",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Close current editor
  {
    "key": "space b d",
    "command": "workbench.action.closeActiveEditor",
    "when": "(vim.mode == 'Normal' && editorTextFocus) || !inputFocus"
  },

  // Name: Close other editors
  {
    "key": "space b o",
    "command": "workbench.action.closeOtherEditors",
    "when": "(vim.mode == 'Normal' && editorTextFocus) || !inputFocus"
  },

  // Name: Quick Open (files by name)
  {
    "key": "space space",
    "command": "workbench.action.quickOpen",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Name: Go to Definition
  {
    "key": "space g d",
    "command": "editor.action.revealDefinition",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Find References
  {
    "key": "space g r",
    "command": "editor.action.goToReferences",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Go to Implementation
  {
    "key": "space g i",
    "command": "editor.action.goToImplementation",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Global Search (Find in Files)
  {
    "key": "space s g",
    "command": "workbench.action.findInFiles",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Name: Open Source Control view (Git) and focus it
  {
    "key": "space g g",
    "command": "runCommands",
    "args": {
      "commands": ["workbench.view.scm", "workbench.scm.focus"]
    },
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Name: Add next occurrence to selection (multi-cursor)
  {
    "key": "ctrl-n",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },

  // =================
  // üìÅ FILE EXPLORER
  // =================

  // Name: Open new folder (Explorer)
  {
    "key": "ctrl+alt+o",
    "command": "workbench.action.files.openFolder"
  },

  // Name: Rename (Explorer)
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Copy (Explorer)
  {
    "key": "c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Paste (Explorer)
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Cut (Explorer)
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Delete (Explorer)
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: New File (Explorer)
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: New Folder (Explorer)
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Open to the Side (Explorer)
  {
    "key": "s",
    "command": "explorer.openToSide",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Split below, open, focus, close others (Explorer)
  {
    "key": "shift-s",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "explorer.openAndPassFocus",
        "workbench.action.closeOtherEditors"
      ]
    },
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },

  // Name: Open file & focus editor (Explorer item)
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceIsFolder && !inputFocus"
  },

  // Name: Toggle expand/collapse folder (Explorer folder)
  {
    "key": "enter",
    "command": "list.toggleExpand",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && explorerResourceIsFolder && !inputFocus"
  },

  // =============
  // üêû DEBUGGING
  // =============

  // Name: Select and Start Debugging
  {
    "key": "space d a",
    "command": "workbench.action.debug.selectandstart",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && debuggersAvailable"
  },

  // Name: Stop Debugging
  {
    "key": "space d t",
    "command": "workbench.action.debug.stop",
    "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && !focusedSessionIsAttached"
  },

  // Name: Step Over
  {
    "key": "space d o",
    "command": "workbench.action.debug.stepOver",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'"
  },

  // Name: Toggle Breakpoint
  {
    "key": "space d b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Name: Show Debug Hover (inspect variables)
  {
    "key": "space d e",
    "command": "editor.debug.action.showDebugHover",
    "when": "vim.mode == 'Normal' && editorTextFocus && inDebugMode && debugState == 'stopped'"
  },

  // Name: Continue
  {
    "key": "space d c",
    "command": "workbench.action.debug.continue",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && inDebugMode && debugState == 'stopped'"
  }
]
